// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  name      String
  username  String    @unique
  email     String    @unique
  password  String
  phone     String?
  website   String?
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  address   Address?
  company   Company?
  posts     Post[]
  comments  Comment[]
  albums    Album[]
  todos     Todo[]

  @@map("users")
}

model Address {
  id      Int     @id @default(autoincrement())
  street  String
  suite   String?
  city    String
  zipcode String
  geo     Geo?
  userId  Int     @unique @map("user_id")
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("addresses")
}

model Geo {
  id        Int     @id @default(autoincrement())
  lat       String
  lng       String
  addressId Int     @unique @map("address_id")
  address   Address @relation(fields: [addressId], references: [id], onDelete: Cascade)

  @@map("geos")
}

model Company {
  id          Int     @id @default(autoincrement())
  name        String
  catchPhrase String?
  bs          String?
  userId      Int     @unique @map("user_id")
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("companies")
}

model Post {
  id        Int       @id @default(autoincrement())
  title     String
  body      String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  userId    Int       @map("user_id")
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments  Comment[]

  @@map("posts")
}

model Comment {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  body      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  postId    Int      @map("post_id")
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    Int?     @map("user_id")
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("comments")
}

model Album {
  id        Int      @id @default(autoincrement())
  title     String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  userId    Int      @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  photos    Photo[]

  @@map("albums")
}

model Photo {
  id           Int      @id @default(autoincrement())
  title        String
  url          String
  thumbnailUrl String   @map("thumbnail_url")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  albumId      Int      @map("album_id")
  album        Album    @relation(fields: [albumId], references: [id], onDelete: Cascade)

  @@map("photos")
}

model Todo {
  id        Int      @id @default(autoincrement())
  title     String
  completed Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  userId    Int      @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("todos")
}
